/* Generated by /home/jehrlich/OpenDDS-3.13/bin/opendds_idl version 3.13 (ACE version 6.2a_p15) running on input file Motor.idl */
#include "MotorTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Actuators */



/* Begin ENUM: MotorDirection */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Actuators::MotorDirection& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, Actuators::MotorDirection& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<Actuators::MotorDirection>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_Actuators_MotorDirection_names[] = {
  "MOTOR_FORWARD",
  "MOTOR_BACKWARD",
  "MOTOR_END"
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: MotorDirection */


/* Begin STRUCT: Motor */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Actuators::Motor& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.motor_speed));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.motor_key);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.motor_count);
}

bool operator<<(Serializer& strm, const Actuators::Motor& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.motor_direction)
    && (strm << ACE_OutputCDR::from_octet(stru.motor_speed))
    && (strm << stru.motor_key)
    && (strm << stru.motor_count);
}

bool operator>>(Serializer& strm, Actuators::Motor& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.motor_direction)
    && (strm >> ACE_InputCDR::to_octet(stru.motor_speed))
    && (strm >> stru.motor_key)
    && (strm >> stru.motor_count);
}

size_t gen_max_marshaled_size(const Actuators::Motor& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return align ? 16 : 13;
}

size_t gen_max_marshaled_size(KeyOnly<const Actuators::Motor> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Actuators::Motor> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.motor_key);
}

bool operator<<(Serializer& strm, KeyOnly<const Actuators::Motor> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.motor_key);
}

bool operator>>(Serializer& strm, KeyOnly<Actuators::Motor> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.motor_key);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Actuators {
::DDS::DataWriter_ptr MotorTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Motor> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MotorTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Motor> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MotorTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Motor> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Motor, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MotorTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Motor>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool MotorTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* MotorTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

MotorTypeSupport::_ptr_type MotorTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Actuators::Motor> : MetaStruct {
  typedef Actuators::Motor T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Actuators::Motor& typed = *static_cast<const Actuators::Motor*>(stru);
    if (std::strcmp(field, "motor_direction") == 0) {
      return gen_Actuators_MotorDirection_names[typed.motor_direction];
    }
    if (std::strcmp(field, "motor_speed") == 0) {
      return typed.motor_speed;
    }
    if (std::strcmp(field, "motor_key") == 0) {
      return typed.motor_key;
    }
    if (std::strcmp(field, "motor_count") == 0) {
      return typed.motor_count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Motor)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "motor_direction") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'motor_direction' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'motor_direction' could not be skipped");
      }
    }
    if (std::strcmp(field, "motor_speed") == 0) {
      ACE_CDR::Octet val;
      if (!(ser >> ACE_InputCDR::to_octet(val))) {
        throw std::runtime_error("Field 'motor_speed' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'motor_speed' could not be skipped");
      }
    }
    if (std::strcmp(field, "motor_key") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'motor_key' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'motor_key' could not be skipped");
      }
    }
    if (std::strcmp(field, "motor_count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'motor_count' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'motor_count' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Actuators::Motor");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "motor_direction") == 0) {
      return make_field_cmp(&T::motor_direction, next);
    }
    if (std::strcmp(field, "motor_speed") == 0) {
      return make_field_cmp(&T::motor_speed, next);
    }
    if (std::strcmp(field, "motor_key") == 0) {
      return make_field_cmp(&T::motor_key, next);
    }
    if (std::strcmp(field, "motor_count") == 0) {
      return make_field_cmp(&T::motor_count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Motor)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"motor_direction", "motor_speed", "motor_key", "motor_count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "motor_direction") == 0) {
      return &static_cast<const T*>(stru)->motor_direction;
    }
    if (std::strcmp(field, "motor_speed") == 0) {
      return &static_cast<const T*>(stru)->motor_speed;
    }
    if (std::strcmp(field, "motor_key") == 0) {
      return &static_cast<const T*>(stru)->motor_key;
    }
    if (std::strcmp(field, "motor_count") == 0) {
      return &static_cast<const T*>(stru)->motor_count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Motor)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "motor_direction") == 0) {
      static_cast<T*>(lhs)->motor_direction = *static_cast<const Actuators::MotorDirection*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "motor_speed") == 0) {
      static_cast<T*>(lhs)->motor_speed = *static_cast<const CORBA::Octet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "motor_key") == 0) {
      static_cast<T*>(lhs)->motor_key = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "motor_count") == 0) {
      static_cast<T*>(lhs)->motor_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Motor)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "motor_direction") == 0) {
      return static_cast<const T*>(lhs)->motor_direction == static_cast<const T*>(rhs)->motor_direction;
    }
    if (std::strcmp(field, "motor_speed") == 0) {
      return static_cast<const T*>(lhs)->motor_speed == static_cast<const T*>(rhs)->motor_speed;
    }
    if (std::strcmp(field, "motor_key") == 0) {
      return static_cast<const T*>(lhs)->motor_key == static_cast<const T*>(rhs)->motor_key;
    }
    if (std::strcmp(field, "motor_count") == 0) {
      return static_cast<const T*>(lhs)->motor_count == static_cast<const T*>(rhs)->motor_count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Motor)");
  }
};

template<>
const MetaStruct& getMetaStruct<Actuators::Motor>()
{
  static MetaStructImpl<Actuators::Motor> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Actuators::Motor*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Actuators::Motor>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Motor */


/* Begin ENUM: SteeringOrientation */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Actuators::SteeringOrientation& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, Actuators::SteeringOrientation& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<Actuators::SteeringOrientation>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_Actuators_SteeringOrientation_names[] = {
  "STEERING_LEFT",
  "STEERING_RIGHT",
  "STEERING_END"
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: SteeringOrientation */


/* Begin STRUCT: Steering */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Actuators::Steering& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.steering_angle));
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.steering_key);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.steering_count);
}

bool operator<<(Serializer& strm, const Actuators::Steering& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.steering_orientation)
    && (strm << ACE_OutputCDR::from_octet(stru.steering_angle))
    && (strm << stru.steering_key)
    && (strm << stru.steering_count);
}

bool operator>>(Serializer& strm, Actuators::Steering& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.steering_orientation)
    && (strm >> ACE_InputCDR::to_octet(stru.steering_angle))
    && (strm >> stru.steering_key)
    && (strm >> stru.steering_count);
}

size_t gen_max_marshaled_size(const Actuators::Steering& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return align ? 16 : 13;
}

size_t gen_max_marshaled_size(KeyOnly<const Actuators::Steering> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 4;
}

void gen_find_size(KeyOnly<const Actuators::Steering> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.steering_key);
}

bool operator<<(Serializer& strm, KeyOnly<const Actuators::Steering> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.steering_key);
}

bool operator>>(Serializer& strm, KeyOnly<Actuators::Steering> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.steering_key);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Actuators {
::DDS::DataWriter_ptr SteeringTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Steering> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr SteeringTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Steering> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr SteeringTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Steering> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Steering, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& SteeringTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Steering>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool SteeringTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* SteeringTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

SteeringTypeSupport::_ptr_type SteeringTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<Actuators::Steering> : MetaStruct {
  typedef Actuators::Steering T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const Actuators::Steering& typed = *static_cast<const Actuators::Steering*>(stru);
    if (std::strcmp(field, "steering_orientation") == 0) {
      return gen_Actuators_SteeringOrientation_names[typed.steering_orientation];
    }
    if (std::strcmp(field, "steering_angle") == 0) {
      return typed.steering_angle;
    }
    if (std::strcmp(field, "steering_key") == 0) {
      return typed.steering_key;
    }
    if (std::strcmp(field, "steering_count") == 0) {
      return typed.steering_count;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Steering)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "steering_orientation") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'steering_orientation' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'steering_orientation' could not be skipped");
      }
    }
    if (std::strcmp(field, "steering_angle") == 0) {
      ACE_CDR::Octet val;
      if (!(ser >> ACE_InputCDR::to_octet(val))) {
        throw std::runtime_error("Field 'steering_angle' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 1)) {
        throw std::runtime_error("Field 'steering_angle' could not be skipped");
      }
    }
    if (std::strcmp(field, "steering_key") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'steering_key' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'steering_key' could not be skipped");
      }
    }
    if (std::strcmp(field, "steering_count") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'steering_count' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'steering_count' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct Actuators::Steering");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "steering_orientation") == 0) {
      return make_field_cmp(&T::steering_orientation, next);
    }
    if (std::strcmp(field, "steering_angle") == 0) {
      return make_field_cmp(&T::steering_angle, next);
    }
    if (std::strcmp(field, "steering_key") == 0) {
      return make_field_cmp(&T::steering_key, next);
    }
    if (std::strcmp(field, "steering_count") == 0) {
      return make_field_cmp(&T::steering_count, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Steering)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"steering_orientation", "steering_angle", "steering_key", "steering_count", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "steering_orientation") == 0) {
      return &static_cast<const T*>(stru)->steering_orientation;
    }
    if (std::strcmp(field, "steering_angle") == 0) {
      return &static_cast<const T*>(stru)->steering_angle;
    }
    if (std::strcmp(field, "steering_key") == 0) {
      return &static_cast<const T*>(stru)->steering_key;
    }
    if (std::strcmp(field, "steering_count") == 0) {
      return &static_cast<const T*>(stru)->steering_count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Steering)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "steering_orientation") == 0) {
      static_cast<T*>(lhs)->steering_orientation = *static_cast<const Actuators::SteeringOrientation*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "steering_angle") == 0) {
      static_cast<T*>(lhs)->steering_angle = *static_cast<const CORBA::Octet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "steering_key") == 0) {
      static_cast<T*>(lhs)->steering_key = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "steering_count") == 0) {
      static_cast<T*>(lhs)->steering_count = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Steering)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "steering_orientation") == 0) {
      return static_cast<const T*>(lhs)->steering_orientation == static_cast<const T*>(rhs)->steering_orientation;
    }
    if (std::strcmp(field, "steering_angle") == 0) {
      return static_cast<const T*>(lhs)->steering_angle == static_cast<const T*>(rhs)->steering_angle;
    }
    if (std::strcmp(field, "steering_key") == 0) {
      return static_cast<const T*>(lhs)->steering_key == static_cast<const T*>(rhs)->steering_key;
    }
    if (std::strcmp(field, "steering_count") == 0) {
      return static_cast<const T*>(lhs)->steering_count == static_cast<const T*>(rhs)->steering_count;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct Actuators::Steering)");
  }
};

template<>
const MetaStruct& getMetaStruct<Actuators::Steering>()
{
  static MetaStructImpl<Actuators::Steering> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, Actuators::Steering*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<Actuators::Steering>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Steering */

/* End MODULE: Actuators */
