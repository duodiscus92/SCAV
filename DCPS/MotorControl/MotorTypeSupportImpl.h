/* -*- C++ -*- */
/* Generated by /home/jehrlich/OpenDDS-3.13/bin/opendds_idl version 3.13 (ACE version 6.2a_p15) running on input file Motor.idl */
#ifndef OPENDDS_IDL_GENERATED_MOTORTYPESUPPORTIMPL_H_Y7WPSL
#define OPENDDS_IDL_GENERATED_MOTORTYPESUPPORTIMPL_H_Y7WPSL
#include "MotorC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "MotorTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Actuators */



/* Begin ENUM: MotorDirection */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Actuators::MotorDirection& enumval);

bool operator>>(Serializer& strm, Actuators::MotorDirection& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_Actuators_MotorDirection_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: MotorDirection */


/* Begin STRUCT: Motor */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Actuators::Motor& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Actuators::Motor& stru);

bool operator>>(Serializer& strm, Actuators::Motor& stru);

size_t gen_max_marshaled_size(const Actuators::Motor& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Actuators::Motor> stru, bool align);

void gen_find_size(KeyOnly<const Actuators::Motor> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Actuators::Motor> stru);

bool operator>>(Serializer& strm, KeyOnly<Actuators::Motor> stru);

template <>
struct MarshalTraits<Actuators::Motor> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Actuators {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Motor_OpenDDS_KeyLessThan {
  bool operator()(const Actuators::Motor& v1, const Actuators::Motor& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.motor_key < v2.motor_key) return true;
    if (v2.motor_key < v1.motor_key) return false;
    return false;
  }
};
}


namespace Actuators {
class MotorTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Actuators::Motor> {
  typedef Actuators::Motor MessageType;
  typedef Actuators::MotorSeq MessageSequenceType;
  typedef Actuators::MotorTypeSupport TypeSupportType;
  typedef Actuators::MotorTypeSupportImpl TypeSupportTypeImpl;
  typedef Actuators::MotorDataWriter DataWriterType;
  typedef Actuators::MotorDataReader DataReaderType;
  typedef Actuators::Motor_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Actuators::Motor"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Actuators {
class  MotorTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MotorTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Motor> TraitsType;
  typedef MotorTypeSupport TypeSupportType;
  typedef MotorTypeSupport::_var_type _var_type;
  typedef MotorTypeSupport::_ptr_type _ptr_type;

  MotorTypeSupportImpl() {}
  virtual ~MotorTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static MotorTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<Actuators::Motor>();
bool gen_skip_over(Serializer& ser, Actuators::Motor*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Motor */


/* Begin ENUM: SteeringOrientation */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const Actuators::SteeringOrientation& enumval);

bool operator>>(Serializer& strm, Actuators::SteeringOrientation& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

extern const char* gen_Actuators_SteeringOrientation_names[];
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: SteeringOrientation */


/* Begin STRUCT: Steering */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const Actuators::Steering& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const Actuators::Steering& stru);

bool operator>>(Serializer& strm, Actuators::Steering& stru);

size_t gen_max_marshaled_size(const Actuators::Steering& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const Actuators::Steering> stru, bool align);

void gen_find_size(KeyOnly<const Actuators::Steering> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const Actuators::Steering> stru);

bool operator>>(Serializer& strm, KeyOnly<Actuators::Steering> stru);

template <>
struct MarshalTraits<Actuators::Steering> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Actuators {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Steering_OpenDDS_KeyLessThan {
  bool operator()(const Actuators::Steering& v1, const Actuators::Steering& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.steering_key < v2.steering_key) return true;
    if (v2.steering_key < v1.steering_key) return false;
    return false;
  }
};
}


namespace Actuators {
class SteeringTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<Actuators::Steering> {
  typedef Actuators::Steering MessageType;
  typedef Actuators::SteeringSeq MessageSequenceType;
  typedef Actuators::SteeringTypeSupport TypeSupportType;
  typedef Actuators::SteeringTypeSupportImpl TypeSupportTypeImpl;
  typedef Actuators::SteeringDataWriter DataWriterType;
  typedef Actuators::SteeringDataReader DataReaderType;
  typedef Actuators::Steering_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "Actuators::Steering"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace Actuators {
class  SteeringTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<SteeringTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Steering> TraitsType;
  typedef SteeringTypeSupport TypeSupportType;
  typedef SteeringTypeSupport::_var_type _var_type;
  typedef SteeringTypeSupport::_ptr_type _ptr_type;

  SteeringTypeSupportImpl() {}
  virtual ~SteeringTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static SteeringTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<Actuators::Steering>();
bool gen_skip_over(Serializer& ser, Actuators::Steering*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Steering */

/* End MODULE: Actuators */
#endif /* OPENDDS_IDL_GENERATED_MOTORTYPESUPPORTIMPL_H_Y7WPSL */
