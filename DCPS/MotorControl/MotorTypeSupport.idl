/* Generated by /home/jehrlich/OpenDDS-3.13/bin/opendds_idl version 3.13 (ACE version 6.2a_p15) running on input file Motor.idl */
#ifndef OPENDDS_IDL_GENERATED_MOTORTYPESUPPORT_IDL_Y7WPSL
#define OPENDDS_IDL_GENERATED_MOTORTYPESUPPORT_IDL_Y7WPSL
#define __OPENDDS_IDL_HAS_FIXED
#include "Motor.idl"

#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsPublication.idl"
#include "dds/DdsDcpsSubscriptionExt.idl"
#include "dds/DdsDcpsTopic.idl"
#include "dds/DdsDcpsTypeSupportExt.idl"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: Actuators */



/* Begin ENUM: MotorDirection */


/* End ENUM: MotorDirection */


/* Begin STRUCT: Motor */

module Actuators {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "Actuators::MotorSeq"
typedef sequence<Actuators::Motor> MotorSeq;
#else
native MotorSeq;
#endif

/** Support topic registration for Motor data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface MotorTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for Motor data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface MotorDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in Actuators::Motor instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in Actuators::Motor instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in Actuators::Motor instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in Actuators::Motor instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in Actuators::Motor instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in Actuators::Motor instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in Actuators::Motor instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in Actuators::Motor instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout Actuators::Motor key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Actuators::Motor instance_data);
};

/** DataReader interface for Motor data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface MotorDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout MotorSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout MotorSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout Actuators::Motor received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout Actuators::Motor received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout MotorSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout MotorSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout MotorSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout Actuators::Motor key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Actuators::Motor instance_data);
};
};

/* End STRUCT: Motor */


/* Begin ENUM: SteeringOrientation */


/* End ENUM: SteeringOrientation */


/* Begin STRUCT: Steering */

module Actuators {
#pragma DCPS_SUPPORT_ZERO_COPY_READ
#pragma DCPS_GEN_ZERO_COPY_READ

#if !defined (__TAO_IDL) || (__TAO_IDL >= 0x060101)
#pragma DCPS_DATA_SEQUENCE_TYPE "Actuators::SteeringSeq"
typedef sequence<Actuators::Steering> SteeringSeq;
#else
native SteeringSeq;
#endif

/** Support topic registration for Steering data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SteeringTypeSupport : OpenDDS::DCPS::TypeSupport {
};

/** DataWriter interface for Steering data type.
 *
 * See the DDS specifications, OMG formal/04-12-02 and formal/07-01-01,
 * for a description of this interface.
 */
local interface SteeringDataWriter : ::DDS::DataWriter {
    ::DDS::InstanceHandle_t register_instance(
                in Actuators::Steering instance);

    ::DDS::InstanceHandle_t register_instance_w_timestamp(
                in Actuators::Steering instance,
                in ::DDS::Time_t timestamp);

    ::DDS::ReturnCode_t unregister_instance(
                in Actuators::Steering instance,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::ReturnCode_t unregister_instance_w_timestamp(
                in Actuators::Steering instance,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t timestamp);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write(
                in Actuators::Steering instance_data,
                in ::DDS::InstanceHandle_t handle);

    //WARNING: If the handle is non-nil and the instance is not registered
    //         then this operation may cause an access violation.
    //         This lack of safety helps performance.
    ::DDS::ReturnCode_t write_w_timestamp(
                in Actuators::Steering instance_data,
                in ::DDS::InstanceHandle_t handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t dispose(
                in Actuators::Steering instance_data,
                in ::DDS::InstanceHandle_t instance_handle);

    ::DDS::ReturnCode_t dispose_w_timestamp(
                in Actuators::Steering instance_data,
                in ::DDS::InstanceHandle_t instance_handle,
                in ::DDS::Time_t source_timestamp);

    ::DDS::ReturnCode_t get_key_value(
                inout Actuators::Steering key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Actuators::Steering instance_data);
};

/** DataReader interface for Steering data type.
 *
 * See the DDS specification, OMG formal/04-12-02, for a description of
 * this interface.
 */
local interface SteeringDataReader : OpenDDS::DCPS::DataReaderEx {
    ::DDS::ReturnCode_t read(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_w_condition(
                inout SteeringSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_w_condition(
                inout SteeringSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_sample(
                inout Actuators::Steering received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t take_next_sample(
                inout Actuators::Steering received_data,
                inout ::DDS::SampleInfo sample_info);

    ::DDS::ReturnCode_t read_instance(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_instance(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_instance_w_condition(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_instance_w_condition(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t read_next_instance(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t take_next_instance(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq,
                in long max_samples,
                in ::DDS::InstanceHandle_t a_handle,
                in ::DDS::SampleStateMask sample_states,
                in ::DDS::ViewStateMask view_states,
                in ::DDS::InstanceStateMask instance_states);

    ::DDS::ReturnCode_t read_next_instance_w_condition(
                inout SteeringSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t take_next_instance_w_condition(
                inout SteeringSeq data_values,
                inout ::DDS::SampleInfoSeq sample_infos,
                in long max_samples,
                in ::DDS::InstanceHandle_t previous_handle,
                in ::DDS::ReadCondition a_condition);

    ::DDS::ReturnCode_t return_loan(
                inout SteeringSeq received_data,
                inout ::DDS::SampleInfoSeq info_seq);

    ::DDS::ReturnCode_t get_key_value(
                inout Actuators::Steering key_holder,
                in ::DDS::InstanceHandle_t handle);

    ::DDS::InstanceHandle_t lookup_instance(
                in Actuators::Steering instance_data);
};
};

/* End STRUCT: Steering */

/* End MODULE: Actuators */
#endif /* OPENDDS_IDL_GENERATED_MOTORTYPESUPPORT_IDL_Y7WPSL */
